{
    "collab_server" : "",
    "contents" : "library(anytime)\nlibrary(lubridate)\nlibrary(stringr)\nlibrary(scales)\nlibrary(treemap)\nlibrary(forcats)\nlibrary(shinydashboard)\nlibrary(shiny)\nlibrary(markdown)\nlibrary(tidyverse)\n\ncontributions <- read_csv('contribution_data_for_app.csv')\n\nget_candidates <- function(year, office){\n  (contributions %>% filter(election_year == year, `Office Sought` == office))$full_name %>% unique() %>% sort()\n}\n\nget_offices <- function(year){\n  (contributions %>% filter(election_year == year))$`Office Sought` %>% unique()\n}\n\nget_frame <- function(candidate, year, type, in_kind){\n  if(in_kind == F) kind <- c('MONETARY')\n  else kind <- c('MONETARY', 'IN KIND')\n  contributions %>% \n    mutate(primary_transfer = map_lgl(Name, function(i) str_detect(i, 'PRIMARY'))) %>%\n    filter(full_name == candidate, \n           election_year == year, \n           election_type %in% type, \n           `Form of Transaction` %in% kind, primary_transfer == F)\n}\n\nui <- dashboardPage(\n  dashboardHeader(title = 'Contributions Dashboards'),\n  dashboardSidebar(\n    selectInput('plot_year', 'Year:', c(2014,2015,2016), selected = 2016),\n    checkboxInput('in_kind', 'Include In-Kind Contributions?', value = T),\n    uiOutput('office'),\n    uiOutput('candidates'),\n    checkboxGroupInput('election_type', 'Include These Types of Elections:', \n                       list('General', 'Primary', 'Special'), selected = c('General', 'Primary', 'Special'))\n  ),\n  dashboardBody(\n    fluidRow(\n      box(uiOutput('candidate_name'),\n          uiOutput('party'),\n          uiOutput('office_location'),\n          uiOutput('raised'), width = 12, align = 'center')\n    ),\n    fluidRow(\n      box(title = 'Average Contributions', status = 'primary', solidHeader = T,\n          dataTableOutput('mm_table'),\n          dataTableOutput('num_contrib'),\n          includeMarkdown('violin.md')),\n      box(title = 'Violin Plot of Contributions', status = 'primary', solidHeader = T,\n          plotOutput('violin'))\n    ),\n    fluidRow(\n      box(title = 'Treemap of Contributors', status = 'primary', solidHeader = T,\n          plotOutput('tree')),\n      box(title = 'Table of Contributors', status = 'primary', solidHeader = T,\n          dataTableOutput('c_table'))\n    ),\n    tags$style(type=\"text/css\",\n               \".shiny-output-error { visibility: hidden; }\",\n               \".shiny-output-error:before { visibility: hidden; }\"\n    ),\n    fluidRow(\n      box(includeMarkdown('explain.md'), width = 12)\n    )\n  )\n)\n\nserver <- function(input, output){\n  df <- reactive({get_frame(input$candidate, input$plot_year, input$election_type, input$in_kind)})\n  output$raised <- renderUI({\n    total_raised <- df()$`Transaction Amount` %>% \n      sum() %>% \n      dollar_format()()\n    h3(paste0('Total Raised: ', total_raised), align = 'center')\n  })\n  output$candidate_name <- renderUI({ input$candidate %>% h1(align = 'center') })\n  output$party <- renderUI({ h2(df()$`Party Affiliation`[1]) })\n  output$office_location <- renderUI({ \n    h2(paste0(df()$`Office Sought`[1],' - ',\n              df()$`Location of Office`[1]),\n       align = 'center') \n  })\n  output$office <- renderUI({\n    office <- get_offices(input$plot_year)\n    selectInput('office', 'Choose Office Sought', office, selected = office[1])\n  })\n  output$candidates <- renderUI({\n    candidates <- get_candidates(input$plot_year, input$office)\n    selectInput('candidate', 'Choose Candidate', candidates, selected = candidates[1])\n  })\n  output$mm_table <- renderDataTable({\n    bind_cols(\n      df() %>% \n        summarize(`Mean Transaction Amount` = dollar_format()(mean(`Transaction Amount`))),\n      df() %>% \n        summarize(`Median Transaction Amount` = dollar_format()(median(`Transaction Amount`)))\n    )\n  }, options = list(dom = 't', searching = F, columnDefs = list(list(width = '200px', targets = \"_all\"))\n))\n  output$num_contrib <- renderDataTable({\n    bind_cols(\n      df() %>% \n        summarize(`Number of Transactions` = n()),\n      df() %>% \n        group_by(Name, `Form of Transaction`) %>%\n        summarize(`Total Given` = sum(`Transaction Amount`)) %>% \n        ungroup() %>% \n        summarize(`Unique Donors` = n())\n    )\n  }, options = list(dom = 't', searching = F, columnDefs = list(list(width = '200px', targets = \"_all\"))))\n  output$violin <- renderPlot({\n    df() %>% \n      group_by(Name, `Organization Name`) %>%\n      summarize(`Total Given` = sum(`Transaction Amount`)) %>% \n      arrange(`Total Given` %>% desc()) %>% \n      ggplot(aes(x= 1, y =`Total Given`, fill = 'A')) + \n      geom_violin(show.legend = F) +\n      geom_boxplot(aes(fill = 'B', alpha = 0.6), width = 0.1, show.legend = F) +\n      scale_y_continuous(labels = dollar_format()) +\n      scale_fill_manual(values = c('dodgerblue', 'grey')) +\n      labs(x = '') +\n      theme_minimal() +\n      theme(axis.text.y = element_blank(),\n            axis.ticks.y = element_blank()) +\n      coord_flip()\n  })\n  output$tree <- renderPlot({\n    if(df() %>% \n       group_by(Name, `Form of Transaction`) %>%\n       summarize(`Total Given` = sum(`Transaction Amount`)) %>%\n       nrow() > 1000) NA\n    else df() %>%\n      group_by(Name, `Organization Name`, `Form of Transaction`) %>%\n      summarize(`Total Given` = sum(`Transaction Amount`)) %>% \n      filter(`Total Given` >= 0) %>% \n      treemap(index = 'Name', vSize = 'Total Given')\n  })\n  output$c_table <- renderDataTable({\n    df() %>%\n      group_by(Name, `Form of Transaction`) %>%\n      summarize(`Total Given` = sum(`Transaction Amount`)) %>% \n      arrange(desc(`Total Given`)) %>% \n      mutate(`Total Given` = dollar_format()(`Total Given`))\n  }, options = list(dom = 'tp'))\n}\n\nshinyApp(ui,server)\n",
    "created" : 1496420584070.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1311969621",
    "id" : "9D35F470",
    "lastKnownWriteTime" : 1496527428,
    "last_content_update" : 1496527428339,
    "path" : "C:/Users/rkahn/Google Drive/R/contributions/app.R",
    "project_path" : "app.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}